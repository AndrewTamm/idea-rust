/* The following code was generated by JFlex 1.4.3 on 8/04/14 8:20 PM */

package vektah.rust;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.text.CharArrayUtil;
import com.intellij.psi.TokenType;
import vektah.rust.psi.RustTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/04/14 8:20 PM from the specification file
 * <tt>src/flex/RustLexer.flex</tt>
 */
class RustLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_BLOCK_COMMENT = 2;
  public static final int IN_RAW_STRING = 4;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\36\2\0\1\56\22\0\1\1\1\71\1\33\1\57"+
    "\1\74\1\70\1\60\1\34\1\77\1\100\1\55\1\50\1\103\1\64"+
    "\1\52\1\54\1\37\1\42\1\45\1\44\1\46\1\53\1\43\1\53"+
    "\1\41\1\3\1\67\1\104\1\65\1\62\1\63\1\0\1\73\4\32"+
    "\1\47\1\32\16\2\1\40\5\2\1\75\1\35\1\76\1\66\1\51"+
    "\1\0\1\4\1\6\1\12\1\14\1\10\1\23\1\2\1\26\1\24"+
    "\1\2\1\11\1\16\1\21\1\17\1\15\1\25\1\2\1\7\1\5"+
    "\1\13\1\20\1\27\1\31\1\22\1\30\1\2\1\101\1\61\1\102"+
    "\1\72\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\21\3\1\1\1\5"+
    "\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\40\1\41\1\42\1\0\2\4"+
    "\1\0\1\43\4\3\1\44\1\3\1\45\1\0\6\3"+
    "\1\46\6\3\1\47\6\3\1\0\1\50\6\0\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\0\1\4\3\0"+
    "\1\4\5\3\1\44\5\3\1\46\3\3\1\47\3\3"+
    "\3\0\1\67\3\0\1\44\1\46\1\47\1\4\3\3"+
    "\1\44\4\3\1\46\5\3\1\47\3\3\6\0\1\44"+
    "\1\46\1\47\2\3\2\0\1\44\3\0\1\46\3\0"+
    "\1\47\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\317\0\317\0\u0747\0\317\0\317"+
    "\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\317\0\u092a"+
    "\0\317\0\u096f\0\317\0\317\0\317\0\317\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\317\0\u09b4\0\u09f9\0\317"+
    "\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0159\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\317\0\u0d35\0\u0d7a\0\u0dbf"+
    "\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7"+
    "\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f"+
    "\0\u1254\0\u1299\0\u0678\0\317\0\u12de\0\u1323\0\u1368\0\u13ad"+
    "\0\u13f2\0\u1437\0\u147c\0\317\0\317\0\317\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\317\0\317\0\317\0\317"+
    "\0\u14c1\0\317\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f"+
    "\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887"+
    "\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf"+
    "\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\317\0\u1c08\0\u1c4d\0\u1c92"+
    "\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u0159"+
    "\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u0159\0\u1fce\0\u2013\0\u2058"+
    "\0\u209d\0\u20e2\0\u0159\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463"+
    "\0\u24a8\0\u24ed\0\u2532\0\317\0\u2577\0\u25bc\0\u2601\0\317"+
    "\0\u2646\0\u268b\0\u26d0\0\317\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\6\1\15\1\16\1\17\1\20\1\21\1\6"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\3\6\1\30"+
    "\1\6\1\31\1\32\1\4\1\5\1\33\1\6\6\7"+
    "\1\6\1\34\1\6\1\35\1\7\1\36\1\37\1\5"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\55\66\1\67"+
    "\27\66\33\70\1\71\51\70\106\0\1\5\34\0\1\5"+
    "\17\0\1\5\30\0\31\6\4\0\11\6\1\0\1\6"+
    "\1\0\1\6\34\0\1\7\4\0\1\72\7\0\1\73"+
    "\2\0\1\74\1\73\12\0\1\7\1\0\6\7\1\72"+
    "\1\0\1\7\1\75\1\7\33\0\3\6\1\76\25\6"+
    "\4\0\11\6\1\0\1\6\1\0\1\6\33\0\6\6"+
    "\1\77\2\6\1\100\4\6\1\101\12\6\4\0\11\6"+
    "\1\0\1\6\1\0\1\6\33\0\5\6\1\102\23\6"+
    "\4\0\1\103\2\6\1\103\5\6\1\0\1\103\1\0"+
    "\1\6\33\0\6\6\1\104\22\6\1\105\3\0\11\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\106\27\0\14\6"+
    "\1\107\1\110\2\6\1\111\10\6\4\0\11\6\1\0"+
    "\1\6\1\0\1\6\33\0\5\6\1\112\23\6\4\0"+
    "\11\6\1\0\1\6\1\0\1\6\33\0\5\6\1\113"+
    "\20\6\1\114\2\6\4\0\11\6\1\0\1\6\1\0"+
    "\1\6\33\0\13\6\1\76\15\6\4\0\11\6\1\0"+
    "\1\6\1\0\1\6\33\0\31\6\4\0\1\115\2\6"+
    "\5\115\1\6\1\0\1\115\1\0\1\115\33\0\6\6"+
    "\1\116\4\6\1\117\15\6\4\0\11\6\1\0\1\6"+
    "\1\0\1\6\33\0\3\6\1\120\11\6\1\121\13\6"+
    "\4\0\11\6\1\0\1\6\1\0\1\6\33\0\2\6"+
    "\1\122\10\6\1\123\2\6\1\116\12\6\4\0\11\6"+
    "\1\0\1\6\1\0\1\6\33\0\1\6\2\124\1\6"+
    "\1\124\1\6\1\124\1\6\1\124\1\6\1\124\6\6"+
    "\1\124\6\6\1\124\4\0\1\124\1\6\7\124\1\0"+
    "\1\124\1\0\1\124\33\0\2\6\1\125\10\6\1\126"+
    "\1\6\1\76\13\6\4\0\11\6\1\0\1\6\1\0"+
    "\1\6\33\0\15\6\1\76\1\6\1\127\1\6\1\76"+
    "\7\6\4\0\11\6\1\0\1\6\1\0\1\6\33\0"+
    "\5\6\1\130\10\6\1\131\12\6\4\0\11\6\1\0"+
    "\1\6\1\0\1\6\33\0\24\6\1\132\4\6\4\0"+
    "\11\6\1\0\1\6\1\0\1\6\31\0\33\133\1\134"+
    "\1\133\1\135\47\133\34\136\1\0\1\137\47\136\3\0"+
    "\1\7\2\0\1\140\1\0\1\72\4\0\1\141\2\0"+
    "\1\73\1\0\1\142\1\74\1\73\12\0\1\7\1\0"+
    "\6\7\1\72\1\0\1\7\1\75\1\7\105\0\1\143"+
    "\1\144\107\0\1\145\105\0\1\146\105\0\1\147\1\150"+
    "\103\0\1\151\1\152\104\0\1\153\103\0\1\154\2\0"+
    "\1\155\106\0\1\156\77\0\1\157\22\0\55\66\1\0"+
    "\27\66\54\0\1\160\107\0\1\71\75\0\1\161\13\0"+
    "\1\161\61\0\1\162\1\163\1\164\1\165\103\0\1\164"+
    "\1\165\43\0\1\166\33\0\1\166\1\0\6\166\2\0"+
    "\1\166\1\0\1\166\33\0\14\6\1\167\14\6\4\0"+
    "\11\6\1\0\1\6\1\0\1\6\33\0\2\6\1\170"+
    "\2\6\1\171\23\6\4\0\11\6\1\0\1\6\1\0"+
    "\1\6\33\0\23\6\1\172\5\6\4\0\11\6\1\0"+
    "\1\6\1\0\1\6\33\0\6\6\1\173\22\6\4\0"+
    "\11\6\1\0\1\6\1\0\1\6\33\0\16\6\1\174"+
    "\3\6\1\174\6\6\4\0\1\103\2\6\1\103\5\6"+
    "\1\0\1\103\1\0\1\6\33\0\11\6\1\175\7\6"+
    "\1\76\7\6\4\0\11\6\1\0\1\6\1\0\1\6"+
    "\64\0\1\105\23\0\1\106\27\0\3\6\1\120\25\6"+
    "\4\0\11\6\1\0\1\6\1\0\1\6\33\0\16\6"+
    "\1\176\12\6\4\0\11\6\1\0\1\6\1\0\1\6"+
    "\33\0\11\6\1\177\17\6\4\0\11\6\1\0\1\6"+
    "\1\0\1\6\33\0\2\6\1\200\26\6\4\0\11\6"+
    "\1\0\1\6\1\0\1\6\33\0\2\6\1\201\13\6"+
    "\1\120\12\6\4\0\11\6\1\0\1\6\1\0\1\6"+
    "\33\0\23\6\1\120\5\6\4\0\11\6\1\0\1\6"+
    "\1\0\1\6\33\0\16\6\1\202\3\6\1\202\6\6"+
    "\4\0\1\115\2\6\5\115\1\6\1\0\1\115\1\0"+
    "\1\115\33\0\11\6\1\76\17\6\4\0\11\6\1\0"+
    "\1\6\1\0\1\6\33\0\13\6\1\203\15\6\4\0"+
    "\11\6\1\0\1\6\1\0\1\6\33\0\6\6\1\76"+
    "\22\6\4\0\11\6\1\0\1\6\1\0\1\6\33\0"+
    "\3\6\1\204\25\6\4\0\11\6\1\0\1\6\1\0"+
    "\1\6\33\0\11\6\1\205\17\6\4\0\11\6\1\0"+
    "\1\6\1\0\1\6\33\0\12\6\1\76\16\6\4\0"+
    "\11\6\1\0\1\6\1\0\1\6\33\0\1\6\2\124"+
    "\1\6\1\124\1\6\1\124\1\6\1\124\1\6\1\124"+
    "\3\6\1\206\2\6\1\124\1\206\5\6\1\124\4\0"+
    "\1\124\1\6\7\124\1\0\1\124\1\0\1\124\33\0"+
    "\14\6\1\107\14\6\4\0\11\6\1\0\1\6\1\0"+
    "\1\6\33\0\5\6\1\76\23\6\4\0\11\6\1\0"+
    "\1\6\1\0\1\6\33\0\23\6\1\207\5\6\4\0"+
    "\11\6\1\0\1\6\1\0\1\6\33\0\22\6\1\210"+
    "\6\6\4\0\11\6\1\0\1\6\1\0\1\6\33\0"+
    "\4\6\1\76\24\6\4\0\11\6\1\0\1\6\1\0"+
    "\1\6\33\0\22\6\1\211\6\6\4\0\11\6\1\0"+
    "\1\6\1\0\1\6\44\0\1\133\3\0\1\133\1\212"+
    "\1\0\1\213\10\0\1\133\1\0\3\133\1\214\100\0"+
    "\1\215\63\0\1\136\3\0\1\136\1\216\1\0\1\217"+
    "\11\0\4\136\1\220\103\0\1\221\2\0\1\221\6\0"+
    "\1\221\72\0\1\222\2\0\5\222\2\0\1\222\1\0"+
    "\1\222\34\0\2\223\1\0\1\223\1\0\1\223\1\0"+
    "\1\223\1\0\1\223\6\0\1\223\6\0\1\223\4\0"+
    "\1\223\1\0\7\223\1\0\1\223\1\0\1\223\31\0"+
    "\36\143\1\0\17\143\1\0\26\143\3\0\1\224\33\0"+
    "\1\224\1\0\6\224\2\0\1\224\1\0\1\224\74\0"+
    "\1\162\107\0\1\162\103\0\1\162\42\0\1\166\4\0"+
    "\1\72\12\0\1\74\13\0\1\166\1\0\6\166\1\72"+
    "\1\0\1\166\1\0\1\166\33\0\21\6\1\76\7\6"+
    "\4\0\11\6\1\0\1\6\1\0\1\6\33\0\11\6"+
    "\1\225\17\6\4\0\11\6\1\0\1\6\1\0\1\6"+
    "\33\0\16\6\1\226\12\6\4\0\11\6\1\0\1\6"+
    "\1\0\1\6\33\0\6\6\1\126\22\6\4\0\11\6"+
    "\1\0\1\6\1\0\1\6\33\0\2\6\1\227\26\6"+
    "\4\0\11\6\1\0\1\6\1\0\1\6\33\0\31\6"+
    "\4\0\2\6\1\230\1\231\1\232\1\233\3\6\1\0"+
    "\1\6\1\0\1\6\33\0\16\6\1\234\12\6\4\0"+
    "\11\6\1\0\1\6\1\0\1\6\33\0\17\6\1\76"+
    "\11\6\4\0\11\6\1\0\1\6\1\0\1\6\33\0"+
    "\6\6\1\234\22\6\4\0\11\6\1\0\1\6\1\0"+
    "\1\6\33\0\11\6\1\120\17\6\4\0\11\6\1\0"+
    "\1\6\1\0\1\6\33\0\22\6\1\116\6\6\4\0"+
    "\11\6\1\0\1\6\1\0\1\6\33\0\31\6\4\0"+
    "\2\6\1\235\1\236\1\237\1\240\3\6\1\0\1\6"+
    "\1\0\1\6\33\0\23\6\1\76\5\6\4\0\11\6"+
    "\1\0\1\6\1\0\1\6\33\0\2\6\1\241\26\6"+
    "\4\0\11\6\1\0\1\6\1\0\1\6\33\0\10\6"+
    "\1\242\20\6\4\0\11\6\1\0\1\6\1\0\1\6"+
    "\33\0\31\6\4\0\2\6\1\243\1\244\1\245\1\246"+
    "\3\6\1\0\1\6\1\0\1\6\33\0\14\6\1\76"+
    "\14\6\4\0\11\6\1\0\1\6\1\0\1\6\33\0"+
    "\25\6\1\76\3\6\4\0\11\6\1\0\1\6\1\0"+
    "\1\6\33\0\14\6\1\120\14\6\4\0\11\6\1\0"+
    "\1\6\1\0\1\6\34\0\2\247\1\0\1\247\1\0"+
    "\1\247\1\0\1\247\1\0\1\247\6\0\1\247\6\0"+
    "\1\247\4\0\1\247\1\0\7\247\3\0\1\247\34\0"+
    "\2\250\1\0\1\250\1\0\1\250\1\0\1\250\1\0"+
    "\1\250\6\0\1\250\6\0\1\250\4\0\1\250\1\0"+
    "\7\250\3\0\1\250\34\0\2\251\1\0\1\251\1\0"+
    "\1\251\1\0\1\251\1\0\1\251\6\0\1\251\6\0"+
    "\1\251\4\0\1\251\1\0\7\251\3\0\1\251\34\0"+
    "\2\252\1\0\1\252\1\0\1\252\1\0\1\252\1\0"+
    "\1\252\6\0\1\252\6\0\1\252\4\0\1\252\1\0"+
    "\7\252\3\0\1\252\34\0\2\253\1\0\1\253\1\0"+
    "\1\253\1\0\1\253\1\0\1\253\6\0\1\253\6\0"+
    "\1\253\4\0\1\253\1\0\7\253\3\0\1\253\34\0"+
    "\2\254\1\0\1\254\1\0\1\254\1\0\1\254\1\0"+
    "\1\254\6\0\1\254\6\0\1\254\4\0\1\254\1\0"+
    "\7\254\3\0\1\254\51\0\1\255\3\0\1\255\12\0"+
    "\1\221\2\0\1\221\6\0\1\221\53\0\1\256\3\0"+
    "\1\256\12\0\1\222\2\0\5\222\2\0\1\222\1\0"+
    "\1\222\34\0\2\223\1\0\1\223\1\0\1\223\1\0"+
    "\1\223\1\0\1\223\3\0\1\257\2\0\1\223\1\257"+
    "\5\0\1\223\4\0\1\223\1\0\7\223\1\0\1\223"+
    "\1\0\1\223\34\0\1\224\17\0\1\74\13\0\1\224"+
    "\1\0\6\224\2\0\1\224\1\0\1\224\33\0\22\6"+
    "\1\260\6\6\4\0\11\6\1\0\1\6\1\0\1\6"+
    "\33\0\10\6\1\116\20\6\4\0\11\6\1\0\1\6"+
    "\1\0\1\6\33\0\7\6\1\76\21\6\4\0\11\6"+
    "\1\0\1\6\1\0\1\6\33\0\31\6\4\0\4\6"+
    "\1\230\4\6\1\0\1\6\1\0\1\6\33\0\31\6"+
    "\4\0\7\6\1\230\1\6\1\0\1\6\1\0\1\6"+
    "\33\0\31\6\4\0\6\6\1\230\2\6\1\0\1\6"+
    "\1\0\1\6\33\0\5\6\1\261\23\6\4\0\11\6"+
    "\1\0\1\6\1\0\1\6\33\0\31\6\4\0\4\6"+
    "\1\235\4\6\1\0\1\6\1\0\1\6\33\0\31\6"+
    "\4\0\7\6\1\235\1\6\1\0\1\6\1\0\1\6"+
    "\33\0\31\6\4\0\6\6\1\235\2\6\1\0\1\6"+
    "\1\0\1\6\33\0\21\6\1\120\7\6\4\0\11\6"+
    "\1\0\1\6\1\0\1\6\33\0\24\6\1\76\4\6"+
    "\4\0\11\6\1\0\1\6\1\0\1\6\33\0\31\6"+
    "\4\0\4\6\1\243\4\6\1\0\1\6\1\0\1\6"+
    "\33\0\31\6\4\0\7\6\1\243\1\6\1\0\1\6"+
    "\1\0\1\6\33\0\31\6\4\0\6\6\1\243\2\6"+
    "\1\0\1\6\1\0\1\6\34\0\2\213\1\0\1\213"+
    "\1\0\1\213\1\0\1\213\1\0\1\213\6\0\1\213"+
    "\6\0\1\213\4\0\1\213\1\0\7\213\3\0\1\213"+
    "\34\0\2\133\1\0\1\133\1\0\1\133\1\0\1\133"+
    "\1\0\1\133\6\0\1\133\6\0\1\133\4\0\1\133"+
    "\1\0\7\133\3\0\1\133\34\0\2\262\1\0\1\262"+
    "\1\0\1\262\1\0\1\262\1\0\1\262\6\0\1\262"+
    "\6\0\1\262\4\0\1\262\1\0\7\262\3\0\1\262"+
    "\34\0\2\217\1\0\1\217\1\0\1\217\1\0\1\217"+
    "\1\0\1\217\6\0\1\217\6\0\1\217\4\0\1\217"+
    "\1\0\7\217\3\0\1\217\34\0\2\136\1\0\1\136"+
    "\1\0\1\136\1\0\1\136\1\0\1\136\6\0\1\136"+
    "\6\0\1\136\4\0\1\136\1\0\7\136\3\0\1\136"+
    "\34\0\2\263\1\0\1\263\1\0\1\263\1\0\1\263"+
    "\1\0\1\263\6\0\1\263\6\0\1\263\4\0\1\263"+
    "\1\0\7\263\3\0\1\263\72\0\1\264\1\265\1\266"+
    "\1\267\101\0\1\270\1\271\1\272\1\273\101\0\1\274"+
    "\1\275\1\276\1\277\42\0\10\6\1\76\20\6\4\0"+
    "\11\6\1\0\1\6\1\0\1\6\33\0\15\6\1\76"+
    "\13\6\4\0\11\6\1\0\1\6\1\0\1\6\34\0"+
    "\2\300\1\0\1\300\1\0\1\300\1\0\1\300\1\0"+
    "\1\300\6\0\1\300\6\0\1\300\4\0\1\300\1\0"+
    "\7\300\3\0\1\300\34\0\2\301\1\0\1\301\1\0"+
    "\1\301\1\0\1\301\1\0\1\301\6\0\1\301\6\0"+
    "\1\301\4\0\1\301\1\0\7\301\3\0\1\301\74\0"+
    "\1\264\107\0\1\264\103\0\1\264\102\0\1\270\107\0"+
    "\1\270\103\0\1\270\102\0\1\274\107\0\1\274\103\0"+
    "\1\274\42\0\2\212\1\0\1\212\1\0\1\212\1\0"+
    "\1\212\1\0\1\212\6\0\1\212\6\0\1\212\4\0"+
    "\1\212\1\0\7\212\3\0\1\212\34\0\2\216\1\0"+
    "\1\216\1\0\1\216\1\0\1\216\1\0\1\216\6\0"+
    "\1\216\6\0\1\216\4\0\1\216\1\0\7\216\3\0"+
    "\1\216\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\27\1\2\11\1\1\2\11\6\1\1\11"+
    "\1\1\1\11\1\1\13\11\2\1\1\11\1\1\1\0"+
    "\2\1\1\0\7\1\1\11\1\0\24\1\1\0\1\11"+
    "\6\0\1\1\15\11\1\0\1\11\3\0\24\1\3\0"+
    "\1\11\3\0\26\1\6\0\5\1\2\0\1\11\3\0"+
    "\1\11\3\0\1\11\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private int start_comment;
	private int start_raw_string;
	private int raw_string_hashes;


  RustLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  RustLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { yybegin(YYINITIAL); return RustTokens.SEMICOLON;
          }
        case 56: break;
        case 49: 
          { yybegin(YYINITIAL); return RustTokens.THIN_ARROW;
          }
        case 57: break;
        case 47: 
          { yybegin(YYINITIAL); return RustTokens.GREATER_THAN_OR_EQUAL;
          }
        case 58: break;
        case 7: 
          { yybegin(YYINITIAL); return RustTokens.DOT;
          }
        case 59: break;
        case 16: 
          { yybegin(YYINITIAL); return RustTokens.LESS_THAN;
          }
        case 60: break;
        case 33: 
          { yybegin(IN_RAW_STRING);
          }
        case 61: break;
        case 15: 
          { yybegin(YYINITIAL); return RustTokens.MINUS;
          }
        case 62: break;
        case 4: 
          { yybegin(YYINITIAL); return RustTokens.DEC_LIT;
          }
        case 63: break;
        case 48: 
          { yybegin(YYINITIAL); return RustTokens.RIGHT_SHIFT;
          }
        case 64: break;
        case 20: 
          { yybegin(YYINITIAL); return RustTokens.NOT;
          }
        case 65: break;
        case 3: 
          { yybegin(YYINITIAL); return RustTokens.IDENTIFIER;
          }
        case 66: break;
        case 22: 
          { yybegin(YYINITIAL); return RustTokens.AT;
          }
        case 67: break;
        case 41: 
          { yybegin(YYINITIAL); return RustTokens.LINE_COMMENT;
          }
        case 68: break;
        case 24: 
          { yybegin(YYINITIAL); return RustTokens.OPEN_SQUARE_BRACKET;
          }
        case 69: break;
        case 11: 
          { yybegin(YYINITIAL); return RustTokens.BITWISE_AND;
          }
        case 70: break;
        case 40: 
          { yybegin(YYINITIAL); return RustTokens.STRING_LIT;
          }
        case 71: break;
        case 6: 
          { yybegin(YYINITIAL); return RustTokens.PLUS;
          }
        case 72: break;
        case 39: 
          { yybegin(YYINITIAL); return RustTokens.HEX_LIT;
          }
        case 73: break;
        case 26: 
          { yybegin(YYINITIAL); return RustTokens.OPEN_PAREN;
          }
        case 74: break;
        case 53: 
          { yybegin(YYINITIAL); return RustTokens.NOT_EQUAL;
          }
        case 75: break;
        case 45: 
          { yybegin(YYINITIAL); return RustTokens.EQUAL;
          }
        case 76: break;
        case 44: 
          { yybegin(YYINITIAL); return RustTokens.LOGICAL_OR;
          }
        case 77: break;
        case 13: 
          { yybegin(YYINITIAL); return RustTokens.ASSIGN;
          }
        case 78: break;
        case 25: 
          { yybegin(YYINITIAL); return RustTokens.CLOSE_SQUARE_BRACKET;
          }
        case 79: break;
        case 14: 
          { yybegin(YYINITIAL); return RustTokens.GREATER_THAN;
          }
        case 80: break;
        case 52: 
          { yybegin(YYINITIAL); return RustTokens.DOUBLE_COLON;
          }
        case 81: break;
        case 32: 
          { yybegin(IN_BLOCK_COMMENT);
          }
        case 82: break;
        case 55: 
          { yybegin(YYINITIAL); return RustTokens.CHAR_LIT;
          }
        case 83: break;
        case 51: 
          { yybegin(YYINITIAL); return RustTokens.LEFT_SHIFT;
          }
        case 84: break;
        case 9: 
          { yybegin(YYINITIAL); return RustTokens.MULTIPLY;
          }
        case 85: break;
        case 34: 
          { if (yytext().length() >= raw_string_hashes) {
			// Greedily ate too many #'s ... lets rewind a sec.
			if (yytext().length() > raw_string_hashes) {
				yypushback(yytext().length() - raw_string_hashes);
			}
			yybegin(YYINITIAL);
			zzStartRead = start_raw_string;
			return RustTokens.RAW_STRING_LIT;
		} else {
			yybegin(IN_RAW_STRING);
		}
          }
        case 86: break;
        case 12: 
          { yybegin(YYINITIAL); return RustTokens.BITWISE_OR;
          }
        case 87: break;
        case 2: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 88: break;
        case 28: 
          { yybegin(YYINITIAL); return RustTokens.OPEN_BRACE;
          }
        case 89: break;
        case 8: 
          { yybegin(YYINITIAL); return RustTokens.DIVIDE;
          }
        case 90: break;
        case 35: 
          { yybegin(YYINITIAL); return RustTokens.KEYWORD;
          }
        case 91: break;
        case 36: 
          { yybegin(YYINITIAL); return RustTokens.BIN_LIT;
          }
        case 92: break;
        case 43: 
          { yybegin(YYINITIAL); return RustTokens.LOGICAL_AND;
          }
        case 93: break;
        case 27: 
          { yybegin(YYINITIAL); return RustTokens.CLOSE_PAREN;
          }
        case 94: break;
        case 19: 
          { yybegin(YYINITIAL); return RustTokens.REMAINDER;
          }
        case 95: break;
        case 30: 
          { yybegin(YYINITIAL); return RustTokens.COMMA;
          }
        case 96: break;
        case 10: 
          { yybegin(YYINITIAL); return RustTokens.HASH;
          }
        case 97: break;
        case 38: 
          { yybegin(YYINITIAL); return RustTokens.OCT_LIT;
          }
        case 98: break;
        case 23: 
          { yybegin(YYINITIAL); return RustTokens.DOLLAR;
          }
        case 99: break;
        case 42: 
          { yybegin(IN_BLOCK_COMMENT); start_comment = zzStartRead;
          }
        case 100: break;
        case 37: 
          { yybegin(IN_RAW_STRING); start_raw_string = zzStartRead; raw_string_hashes = yytext().length() - 1;
          }
        case 101: break;
        case 5: 
          { yybegin(YYINITIAL); return RustTokens.SINGLE_QUOTE;
          }
        case 102: break;
        case 18: 
          { yybegin(YYINITIAL); return RustTokens.COLON;
          }
        case 103: break;
        case 50: 
          { yybegin(YYINITIAL); return RustTokens.LESS_THAN_OR_EQUAL;
          }
        case 104: break;
        case 46: 
          { yybegin(YYINITIAL); return RustTokens.FAT_ARROW;
          }
        case 105: break;
        case 54: 
          { yybegin(YYINITIAL); zzStartRead = start_comment; return RustTokens.BLOCK_COMMENT;
          }
        case 106: break;
        case 21: 
          { yybegin(YYINITIAL); return RustTokens.BOX;
          }
        case 107: break;
        case 17: 
          { yybegin(YYINITIAL); return RustTokens.BITWISE_XOR;
          }
        case 108: break;
        case 1: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 109: break;
        case 29: 
          { yybegin(YYINITIAL); return RustTokens.CLOSE_BRACE;
          }
        case 110: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
