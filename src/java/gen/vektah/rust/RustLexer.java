/* The following code was generated by JFlex 1.4.3 on 13/04/14 11:43 AM */

package vektah.rust;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.text.CharArrayUtil;
import com.intellij.psi.TokenType;
import vektah.rust.psi.RustTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/04/14 11:43 AM from the specification file
 * <tt>src/flex/RustLexer.flex</tt>
 */
class RustLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_BLOCK_COMMENT = 2;
  public static final int IN_RAW_STRING = 4;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\2\0\1\56\22\0\1\1\1\70\1\5\1\57"+
    "\1\74\1\67\1\63\1\6\1\77\1\100\1\55\1\26\1\103\1\62"+
    "\1\30\1\54\1\12\1\20\1\23\1\22\1\24\1\34\1\21\1\34"+
    "\1\17\1\3\1\66\1\104\1\71\1\60\1\61\1\0\1\73\4\4"+
    "\1\25\1\4\16\2\1\15\5\2\1\75\1\7\1\76\1\65\1\27"+
    "\1\0\1\35\1\32\1\42\1\50\1\40\1\31\1\2\1\47\1\16"+
    "\1\2\1\41\1\44\1\45\1\11\1\33\1\46\1\2\1\37\1\36"+
    "\1\43\1\14\1\51\1\53\1\13\1\52\1\2\1\101\1\64\1\102"+
    "\1\72\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\1\1\5\1\4"+
    "\2\3\1\6\1\7\14\3\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\40\1\41\1\42\1\4"+
    "\2\0\1\4\1\0\1\43\6\0\2\3\1\44\1\45"+
    "\1\3\1\46\3\3\1\47\3\3\1\50\1\3\1\0"+
    "\16\3\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\4\4\0\1\4\3\0\1\63"+
    "\3\0\1\64\1\65\1\66\1\3\1\67\1\3\1\70"+
    "\6\3\1\71\11\3\1\72\1\73\1\74\1\3\1\75"+
    "\3\3\1\4\6\0\1\64\1\65\1\66\1\3\1\76"+
    "\3\3\1\77\3\3\1\100\1\3\1\101\1\3\1\102"+
    "\1\3\1\103\1\104\1\3\1\105\1\106\1\3\2\0"+
    "\1\64\3\0\1\65\3\0\1\66\3\0\1\3\1\107"+
    "\1\110\1\111\4\3\1\112\1\113\1\114\1\115\2\0"+
    "\1\116\1\117\1\120\1\121\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\317\0\317\0\u033c\0\u0381"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\317\0\317\0\u06bd\0\u0702\0\u0747"+
    "\0\317\0\317\0\317\0\u078c\0\317\0\u07d1\0\u0816\0\317"+
    "\0\317\0\317\0\317\0\317\0\317\0\317\0\317\0\317"+
    "\0\317\0\317\0\u085b\0\u08a0\0\317\0\u08e5\0\u092a\0\u096f"+
    "\0\u09b4\0\u09f9\0\u01e3\0\317\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d"+
    "\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0159\0\u0159\0\u0c66\0\u0159"+
    "\0\u0cab\0\u0cf0\0\u0d35\0\u0159\0\u0d7a\0\u0dbf\0\u0e04\0\317"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\317\0\317\0\317\0\317\0\317\0\317\0\317"+
    "\0\317\0\317\0\317\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2"+
    "\0\u1437\0\u147c\0\u14c1\0\317\0\u1506\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u0159\0\u16e9\0\u0159\0\u172e\0\u1773"+
    "\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u0159\0\u18cc\0\u1911\0\u1956"+
    "\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u0159\0\u0159"+
    "\0\u0159\0\u1b39\0\u0159\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92"+
    "\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba"+
    "\0\u1eff\0\u0159\0\u1f44\0\u1f89\0\u1fce\0\u0159\0\u2013\0\u2058"+
    "\0\u209d\0\u0159\0\u20e2\0\u0159\0\u2127\0\u0159\0\u216c\0\u0159"+
    "\0\u0159\0\u21b1\0\u0159\0\u0159\0\u21f6\0\u223b\0\u2280\0\317"+
    "\0\u22c5\0\u230a\0\u234f\0\317\0\u2394\0\u23d9\0\u241e\0\317"+
    "\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u0159\0\u0159\0\u0159\0\u2577"+
    "\0\u25bc\0\u2601\0\u2646\0\u0159\0\u0159\0\u0159\0\u0159\0\u268b"+
    "\0\u26d0\0\u0159\0\u0159\0\u0159\0\u0159\0\u0159";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\6\1\10\1\11\1\4"+
    "\1\5\1\6\1\12\1\6\1\13\1\6\1\14\6\7"+
    "\1\6\1\15\1\6\1\16\1\17\1\20\1\6\1\7"+
    "\1\21\1\22\1\23\1\24\1\6\1\25\1\26\1\27"+
    "\1\30\1\31\4\6\1\32\1\33\1\34\1\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\55\63\1\64\27\63"+
    "\5\65\1\66\77\65\106\0\1\5\6\0\1\5\45\0"+
    "\1\5\30\0\3\6\4\0\15\6\1\0\1\6\1\0"+
    "\23\6\34\0\1\7\6\0\1\7\1\0\1\67\1\0"+
    "\1\67\6\7\1\70\1\0\1\7\1\71\1\72\2\0"+
    "\1\7\3\0\1\70\44\0\5\73\1\74\1\73\1\75"+
    "\75\73\6\76\1\0\1\77\75\76\3\0\1\7\6\0"+
    "\1\7\1\100\1\67\1\0\1\67\6\7\1\70\1\0"+
    "\1\7\1\71\1\72\1\101\1\102\1\7\3\0\1\70"+
    "\46\0\3\6\4\0\1\103\14\6\1\0\1\6\1\0"+
    "\5\6\1\104\15\6\33\0\3\6\4\0\1\105\14\6"+
    "\1\0\1\6\1\0\1\106\13\6\1\107\6\6\33\0"+
    "\3\6\4\0\1\110\14\6\1\0\1\6\1\0\2\6"+
    "\1\111\1\6\1\112\16\6\33\0\3\6\4\0\15\6"+
    "\1\0\1\6\1\0\6\6\1\113\14\6\33\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\5\6\1\114\15\6"+
    "\33\0\3\6\4\0\3\6\1\115\11\6\1\0\1\6"+
    "\1\0\7\6\1\116\2\6\1\117\10\6\33\0\3\6"+
    "\1\120\3\0\15\6\1\0\1\6\1\0\7\6\1\121"+
    "\13\6\3\0\1\122\27\0\3\6\4\0\1\123\1\6"+
    "\1\124\12\6\1\0\1\6\1\0\13\6\1\125\7\6"+
    "\33\0\3\6\4\0\15\6\1\0\1\6\1\0\6\6"+
    "\1\126\14\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\6\6\1\127\12\6\1\130\1\6\33\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\2\6\1\131\4\6"+
    "\1\132\13\6\33\0\3\6\4\0\3\6\1\133\11\6"+
    "\1\0\1\6\1\0\2\6\1\134\1\6\1\135\16\6"+
    "\33\0\3\6\4\0\3\6\1\136\11\6\1\0\1\6"+
    "\1\0\6\6\1\137\14\6\33\0\3\6\4\0\15\6"+
    "\1\0\1\6\1\0\16\6\1\140\4\6\105\0\1\141"+
    "\1\142\107\0\1\143\1\144\103\0\1\145\105\0\1\146"+
    "\111\0\1\147\76\0\1\150\104\0\1\151\24\0\55\63"+
    "\1\0\27\63\54\0\1\152\107\0\1\66\44\0\1\153"+
    "\1\154\1\155\1\156\110\0\1\157\33\0\1\157\25\0"+
    "\1\160\6\0\1\160\4\0\6\160\2\0\1\160\4\0"+
    "\1\160\71\0\1\155\1\156\67\0\1\73\1\0\4\73"+
    "\1\161\1\162\1\163\25\0\1\73\47\0\1\164\104\0"+
    "\5\76\1\165\1\166\1\167\25\0\1\76\44\0\2\170"+
    "\5\0\1\170\4\0\7\170\1\0\1\170\1\0\2\170"+
    "\1\0\2\170\2\0\1\170\1\0\1\170\5\0\1\170"+
    "\46\0\1\171\5\0\1\171\6\0\1\171\67\0\1\172"+
    "\5\0\5\172\2\0\1\172\4\0\1\172\52\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\5\6\1\173\15\6"+
    "\33\0\3\6\4\0\15\6\1\0\1\6\1\0\7\6"+
    "\1\174\13\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\15\6\1\175\5\6\33\0\3\6\4\0\15\6"+
    "\1\0\1\6\1\0\6\6\1\176\14\6\33\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\13\6\1\177\7\6"+
    "\33\0\3\6\4\0\15\6\1\0\1\6\1\0\7\6"+
    "\1\200\13\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\15\6\1\201\5\6\33\0\3\6\4\0\15\6"+
    "\1\0\1\6\1\0\13\6\1\202\7\6\33\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\4\6\1\203\1\6"+
    "\1\204\14\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\1\205\11\6\1\206\10\6\36\0\1\120\51\0"+
    "\1\122\27\0\3\6\4\0\3\6\1\207\11\6\1\0"+
    "\1\6\1\0\23\6\33\0\3\6\4\0\15\6\1\0"+
    "\1\6\1\0\12\6\1\210\10\6\33\0\3\6\4\0"+
    "\15\6\1\0\1\6\1\0\5\6\1\211\15\6\33\0"+
    "\3\6\4\0\15\6\1\0\1\6\1\0\4\6\1\212"+
    "\16\6\33\0\3\6\4\0\3\6\1\213\11\6\1\0"+
    "\1\6\1\0\4\6\1\214\16\6\33\0\3\6\4\0"+
    "\15\6\1\0\1\6\1\0\15\6\1\215\5\6\33\0"+
    "\3\6\4\0\15\6\1\0\1\6\1\0\2\6\1\216"+
    "\20\6\33\0\3\6\4\0\15\6\1\0\1\6\1\0"+
    "\12\6\1\217\10\6\33\0\3\6\4\0\15\6\1\0"+
    "\1\6\1\0\12\6\1\220\10\6\33\0\3\6\4\0"+
    "\15\6\1\0\1\6\1\0\17\6\1\221\3\6\33\0"+
    "\3\6\4\0\15\6\1\0\1\6\1\0\12\6\1\222"+
    "\10\6\33\0\3\6\4\0\15\6\1\0\1\6\1\0"+
    "\1\6\1\223\21\6\33\0\3\6\4\0\5\6\1\224"+
    "\7\6\1\0\1\6\1\0\2\6\1\225\20\6\33\0"+
    "\3\6\4\0\5\6\1\226\7\6\1\0\1\6\1\0"+
    "\23\6\31\0\10\141\1\0\45\141\1\0\26\141\21\0"+
    "\1\153\107\0\1\153\103\0\1\153\64\0\1\227\6\0"+
    "\1\227\4\0\6\227\2\0\1\227\4\0\1\227\53\0"+
    "\1\160\6\0\1\160\4\0\6\160\1\70\1\0\1\160"+
    "\1\0\1\72\2\0\1\160\3\0\1\70\47\0\2\230"+
    "\5\0\1\230\4\0\7\230\3\0\2\230\1\0\2\230"+
    "\2\0\1\230\1\0\1\230\5\0\1\230\37\0\2\231"+
    "\5\0\1\231\4\0\7\231\3\0\2\231\1\0\2\231"+
    "\2\0\1\231\1\0\1\231\5\0\1\231\37\0\2\232"+
    "\5\0\1\232\4\0\7\232\3\0\2\232\1\0\2\232"+
    "\2\0\1\232\1\0\1\232\5\0\1\232\37\0\2\233"+
    "\5\0\1\233\4\0\7\233\3\0\2\233\1\0\2\233"+
    "\2\0\1\233\1\0\1\233\5\0\1\233\37\0\2\234"+
    "\5\0\1\234\4\0\7\234\3\0\2\234\1\0\2\234"+
    "\2\0\1\234\1\0\1\234\5\0\1\234\37\0\2\235"+
    "\5\0\1\235\4\0\7\235\3\0\2\235\1\0\2\235"+
    "\2\0\1\235\1\0\1\235\5\0\1\235\37\0\2\170"+
    "\5\0\1\170\1\0\1\236\1\0\1\236\7\170\1\0"+
    "\1\170\1\0\2\170\1\0\2\170\2\0\1\170\1\0"+
    "\1\170\5\0\1\170\46\0\1\171\1\0\1\237\1\0"+
    "\1\237\1\0\1\171\6\0\1\171\67\0\1\172\1\0"+
    "\1\240\1\0\1\240\1\0\5\172\2\0\1\172\4\0"+
    "\1\172\52\0\3\6\4\0\15\6\1\0\1\6\1\0"+
    "\4\6\1\241\16\6\33\0\3\6\4\0\15\6\1\0"+
    "\1\6\1\0\13\6\1\242\7\6\33\0\3\6\4\0"+
    "\15\6\1\0\1\6\1\0\5\6\1\243\15\6\33\0"+
    "\3\6\4\0\15\6\1\0\1\6\1\0\4\6\1\244"+
    "\16\6\33\0\3\6\4\0\15\6\1\0\1\6\1\0"+
    "\7\6\1\245\13\6\33\0\3\6\4\0\15\6\1\0"+
    "\1\6\1\0\1\246\22\6\33\0\3\6\4\0\15\6"+
    "\1\0\1\6\1\0\12\6\1\247\10\6\33\0\3\6"+
    "\4\0\3\6\1\250\11\6\1\0\1\6\1\0\23\6"+
    "\33\0\3\6\4\0\3\6\1\251\11\6\1\0\1\6"+
    "\1\0\23\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\14\6\1\252\6\6\33\0\3\6\4\0\15\6"+
    "\1\0\1\6\1\0\7\6\1\253\13\6\33\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\7\6\1\254\13\6"+
    "\33\0\3\6\4\0\15\6\1\0\1\6\1\0\12\6"+
    "\1\255\10\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\7\6\1\256\13\6\33\0\3\6\4\0\5\6"+
    "\1\257\7\6\1\0\1\6\1\0\23\6\33\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\7\6\1\260\13\6"+
    "\33\0\3\6\4\0\15\6\1\0\1\6\1\0\15\6"+
    "\1\261\5\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\11\6\1\262\11\6\33\0\3\6\4\0\15\6"+
    "\1\0\1\6\1\0\20\6\1\263\2\6\33\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\11\6\1\264\11\6"+
    "\33\0\3\6\4\0\15\6\1\0\1\6\1\0\13\6"+
    "\1\265\7\6\34\0\1\227\6\0\1\227\4\0\6\227"+
    "\2\0\1\227\1\0\1\72\2\0\1\227\53\0\2\73"+
    "\5\0\1\73\4\0\7\73\3\0\2\73\1\0\2\73"+
    "\2\0\1\73\1\0\1\73\5\0\1\73\37\0\2\161"+
    "\5\0\1\161\4\0\7\161\3\0\2\161\1\0\2\161"+
    "\2\0\1\161\1\0\1\161\5\0\1\161\37\0\2\266"+
    "\5\0\1\266\4\0\7\266\3\0\2\266\1\0\2\266"+
    "\2\0\1\266\1\0\1\266\5\0\1\266\37\0\2\76"+
    "\5\0\1\76\4\0\7\76\3\0\2\76\1\0\2\76"+
    "\2\0\1\76\1\0\1\76\5\0\1\76\37\0\2\165"+
    "\5\0\1\165\4\0\7\165\3\0\2\165\1\0\2\165"+
    "\2\0\1\165\1\0\1\165\5\0\1\165\37\0\2\267"+
    "\5\0\1\267\4\0\7\267\3\0\2\267\1\0\2\267"+
    "\2\0\1\267\1\0\1\267\5\0\1\267\53\0\1\270"+
    "\1\271\1\272\1\273\101\0\1\274\1\275\1\276\1\277"+
    "\101\0\1\300\1\301\1\302\1\303\64\0\3\6\4\0"+
    "\15\6\1\0\1\6\1\0\1\304\22\6\33\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\7\6\1\305\13\6"+
    "\33\0\3\6\4\0\15\6\1\0\1\6\1\0\10\6"+
    "\1\306\12\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\6\6\1\307\14\6\33\0\3\6\4\0\5\6"+
    "\1\310\7\6\1\0\1\6\1\0\23\6\33\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\11\6\1\311\11\6"+
    "\33\0\3\6\4\0\15\6\1\0\1\6\1\0\6\6"+
    "\1\312\14\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\6\6\1\313\14\6\33\0\3\6\4\0\15\6"+
    "\1\0\1\6\1\0\7\6\1\314\13\6\33\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\12\6\1\315\10\6"+
    "\33\0\3\6\4\0\15\6\1\0\1\6\1\0\16\6"+
    "\1\316\4\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\7\6\1\317\13\6\34\0\2\320\5\0\1\320"+
    "\4\0\7\320\3\0\2\320\1\0\2\320\2\0\1\320"+
    "\1\0\1\320\5\0\1\320\37\0\2\321\5\0\1\321"+
    "\4\0\7\321\3\0\2\321\1\0\2\321\2\0\1\321"+
    "\1\0\1\321\5\0\1\321\55\0\1\270\107\0\1\270"+
    "\103\0\1\270\102\0\1\274\107\0\1\274\103\0\1\274"+
    "\102\0\1\300\107\0\1\300\103\0\1\300\63\0\3\6"+
    "\4\0\15\6\1\0\1\6\1\0\7\6\1\322\13\6"+
    "\33\0\3\6\4\0\15\6\1\0\1\6\1\0\11\6"+
    "\1\323\11\6\33\0\3\6\4\0\15\6\1\0\1\6"+
    "\1\0\12\6\1\324\10\6\33\0\3\6\4\0\1\325"+
    "\14\6\1\0\1\6\1\0\23\6\33\0\3\6\4\0"+
    "\1\326\14\6\1\0\1\6\1\0\23\6\34\0\2\162"+
    "\5\0\1\162\4\0\7\162\3\0\2\162\1\0\2\162"+
    "\2\0\1\162\1\0\1\162\5\0\1\162\37\0\2\166"+
    "\5\0\1\166\4\0\7\166\3\0\2\166\1\0\2\166"+
    "\2\0\1\166\1\0\1\166\5\0\1\166\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10005];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\10\1\2\11\15\1\2\11\3\1\3\11"+
    "\1\1\1\11\2\1\13\11\2\1\1\11\2\1\2\0"+
    "\1\1\1\0\1\11\6\0\15\1\1\11\1\1\1\0"+
    "\17\1\12\11\4\0\1\1\3\0\1\11\3\0\40\1"+
    "\6\0\30\1\2\0\1\11\3\0\1\11\3\0\1\11"+
    "\3\0\14\1\2\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private int start_comment;
	private int start_raw_string;
	private int raw_string_hashes;


  RustLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  RustLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { yybegin(YYINITIAL); return RustTokens.CLOSE_SQUARE_BRACKET;
          }
        case 83: break;
        case 44: 
          { yybegin(YYINITIAL); return RustTokens.FAT_ARROW;
          }
        case 84: break;
        case 18: 
          { yybegin(YYINITIAL); return RustTokens.REMAINDER;
          }
        case 85: break;
        case 10: 
          { yybegin(YYINITIAL); return RustTokens.HASH;
          }
        case 86: break;
        case 17: 
          { yybegin(YYINITIAL); return RustTokens.COLON;
          }
        case 87: break;
        case 81: 
          { yybegin(YYINITIAL); return RustTokens.KW_RETURN;
          }
        case 88: break;
        case 8: 
          { yybegin(YYINITIAL); return RustTokens.DIVIDE;
          }
        case 89: break;
        case 77: 
          { yybegin(YYINITIAL); return RustTokens.KW_WHILE;
          }
        case 90: break;
        case 62: 
          { yybegin(YYINITIAL); return RustTokens.KW_IMPL;
          }
        case 91: break;
        case 63: 
          { yybegin(YYINITIAL); return RustTokens.KW_SELF;
          }
        case 92: break;
        case 22: 
          { yybegin(YYINITIAL); return RustTokens.AT;
          }
        case 93: break;
        case 66: 
          { yybegin(YYINITIAL); return RustTokens.KW_TRUE;
          }
        case 94: break;
        case 55: 
          { yybegin(YYINITIAL); return RustTokens.KW_USE;
          }
        case 95: break;
        case 41: 
          { yybegin(YYINITIAL); return RustTokens.LINE_COMMENT;
          }
        case 96: break;
        case 80: 
          { yybegin(YYINITIAL); return RustTokens.KW_STRUCT;
          }
        case 97: break;
        case 11: 
          { yybegin(YYINITIAL); return RustTokens.ASSIGN;
          }
        case 98: break;
        case 72: 
          { yybegin(YYINITIAL); return RustTokens.KW_BREAK;
          }
        case 99: break;
        case 2: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 100: break;
        case 75: 
          { yybegin(YYINITIAL); return RustTokens.KW_TRAIT;
          }
        case 101: break;
        case 60: 
          { yybegin(YYINITIAL); return RustTokens.KW_MOD;
          }
        case 102: break;
        case 30: 
          { yybegin(YYINITIAL); return RustTokens.COMMA;
          }
        case 103: break;
        case 45: 
          { yybegin(YYINITIAL); return RustTokens.GREATER_THAN_OR_EQUAL;
          }
        case 104: break;
        case 26: 
          { yybegin(YYINITIAL); return RustTokens.OPEN_PAREN;
          }
        case 105: break;
        case 73: 
          { yybegin(YYINITIAL); return RustTokens.KW_SUPER;
          }
        case 106: break;
        case 24: 
          { yybegin(YYINITIAL); return RustTokens.OPEN_SQUARE_BRACKET;
          }
        case 107: break;
        case 51: 
          { yybegin(YYINITIAL); return RustTokens.CHAR_LIT;
          }
        case 108: break;
        case 57: 
          { yybegin(YYINITIAL); return RustTokens.KW_REF;
          }
        case 109: break;
        case 35: 
          { yybegin(YYINITIAL); return RustTokens.STRING_LIT;
          }
        case 110: break;
        case 4: 
          { yybegin(YYINITIAL); return RustTokens.DEC_LIT;
          }
        case 111: break;
        case 49: 
          { yybegin(YYINITIAL); return RustTokens.LESS_THAN_OR_EQUAL;
          }
        case 112: break;
        case 70: 
          { yybegin(YYINITIAL); return RustTokens.KW_PROC;
          }
        case 113: break;
        case 61: 
          { yybegin(YYINITIAL); return RustTokens.KW_PUB;
          }
        case 114: break;
        case 59: 
          { yybegin(YYINITIAL); return RustTokens.KW_MUT;
          }
        case 115: break;
        case 78: 
          { yybegin(YYINITIAL); return RustTokens.KW_UNSAFE;
          }
        case 116: break;
        case 53: 
          { yybegin(YYINITIAL); return RustTokens.BIN_LIT;
          }
        case 117: break;
        case 36: 
          { yybegin(YYINITIAL); return RustTokens.KW_IN;
          }
        case 118: break;
        case 67: 
          { yybegin(YYINITIAL); return RustTokens.KW_TYPE;
          }
        case 119: break;
        case 69: 
          { yybegin(YYINITIAL); return RustTokens.KW_PRIV;
          }
        case 120: break;
        case 3: 
          { yybegin(YYINITIAL); return RustTokens.IDENTIFIER;
          }
        case 121: break;
        case 31: 
          { yybegin(YYINITIAL); return RustTokens.SEMICOLON;
          }
        case 122: break;
        case 54: 
          { yybegin(YYINITIAL); return RustTokens.OCT_LIT;
          }
        case 123: break;
        case 38: 
          { yybegin(YYINITIAL); return RustTokens.KW_FN;
          }
        case 124: break;
        case 64: 
          { yybegin(YYINITIAL); return RustTokens.KW_ENUM;
          }
        case 125: break;
        case 52: 
          { yybegin(YYINITIAL); return RustTokens.HEX_LIT;
          }
        case 126: break;
        case 46: 
          { yybegin(YYINITIAL); return RustTokens.THIN_ARROW;
          }
        case 127: break;
        case 50: 
          { yybegin(YYINITIAL); zzStartRead = start_comment; return RustTokens.BLOCK_COMMENT;
          }
        case 128: break;
        case 15: 
          { yybegin(YYINITIAL); return RustTokens.BITWISE_OR;
          }
        case 129: break;
        case 71: 
          { yybegin(YYINITIAL); return RustTokens.KW_FALSE;
          }
        case 130: break;
        case 74: 
          { yybegin(YYINITIAL); return RustTokens.KW_CRATE;
          }
        case 131: break;
        case 14: 
          { yybegin(YYINITIAL); return RustTokens.BITWISE_AND;
          }
        case 132: break;
        case 20: 
          { yybegin(YYINITIAL); return RustTokens.LESS_THAN;
          }
        case 133: break;
        case 32: 
          { yybegin(IN_BLOCK_COMMENT);
          }
        case 134: break;
        case 33: 
          { yybegin(IN_RAW_STRING);
          }
        case 135: break;
        case 7: 
          { yybegin(YYINITIAL); return RustTokens.DOT;
          }
        case 136: break;
        case 29: 
          { yybegin(YYINITIAL); return RustTokens.CLOSE_BRACE;
          }
        case 137: break;
        case 12: 
          { yybegin(YYINITIAL); return RustTokens.GREATER_THAN;
          }
        case 138: break;
        case 9: 
          { yybegin(YYINITIAL); return RustTokens.MULTIPLY;
          }
        case 139: break;
        case 37: 
          { yybegin(YYINITIAL); return RustTokens.KW_IF;
          }
        case 140: break;
        case 56: 
          { yybegin(YYINITIAL); return RustTokens.KW_FOR;
          }
        case 141: break;
        case 13: 
          { yybegin(YYINITIAL); return RustTokens.MINUS;
          }
        case 142: break;
        case 47: 
          { yybegin(YYINITIAL); return RustTokens.DOUBLE_COLON;
          }
        case 143: break;
        case 42: 
          { yybegin(IN_BLOCK_COMMENT); start_comment = zzStartRead;
          }
        case 144: break;
        case 48: 
          { yybegin(YYINITIAL); return RustTokens.NOT_EQUAL;
          }
        case 145: break;
        case 65: 
          { yybegin(YYINITIAL); return RustTokens.KW_ELSE;
          }
        case 146: break;
        case 27: 
          { yybegin(YYINITIAL); return RustTokens.CLOSE_PAREN;
          }
        case 147: break;
        case 82: 
          { yybegin(YYINITIAL); return RustTokens.KW_EXTERN;
          }
        case 148: break;
        case 79: 
          { yybegin(YYINITIAL); return RustTokens.KW_STATIC;
          }
        case 149: break;
        case 40: 
          { yybegin(IN_RAW_STRING); start_raw_string = zzStartRead; raw_string_hashes = yytext().length() - 1;
          }
        case 150: break;
        case 39: 
          { yybegin(YYINITIAL); return RustTokens.KW_AS;
          }
        case 151: break;
        case 16: 
          { yybegin(YYINITIAL); return RustTokens.BITWISE_XOR;
          }
        case 152: break;
        case 5: 
          { yybegin(YYINITIAL); return RustTokens.SINGLE_QUOTE;
          }
        case 153: break;
        case 58: 
          { yybegin(YYINITIAL); return RustTokens.KW_LET;
          }
        case 154: break;
        case 19: 
          { yybegin(YYINITIAL); return RustTokens.NOT;
          }
        case 155: break;
        case 76: 
          { yybegin(YYINITIAL); return RustTokens.KW_MATCH;
          }
        case 156: break;
        case 1: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 157: break;
        case 34: 
          { if (yytext().length() >= raw_string_hashes) {
			// Greedily ate too many #'s ... lets rewind a sec.
			if (yytext().length() > raw_string_hashes) {
				yypushback(yytext().length() - raw_string_hashes);
			}
			yybegin(YYINITIAL);
			zzStartRead = start_raw_string;
			return RustTokens.RAW_STRING_LIT;
		} else {
			yybegin(IN_RAW_STRING);
		}
          }
        case 158: break;
        case 21: 
          { yybegin(YYINITIAL); return RustTokens.BOX;
          }
        case 159: break;
        case 23: 
          { yybegin(YYINITIAL); return RustTokens.DOLLAR;
          }
        case 160: break;
        case 28: 
          { yybegin(YYINITIAL); return RustTokens.OPEN_BRACE;
          }
        case 161: break;
        case 6: 
          { yybegin(YYINITIAL); return RustTokens.PLUS;
          }
        case 162: break;
        case 43: 
          { yybegin(YYINITIAL); return RustTokens.EQUAL;
          }
        case 163: break;
        case 68: 
          { yybegin(YYINITIAL); return RustTokens.KW_LOOP;
          }
        case 164: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
