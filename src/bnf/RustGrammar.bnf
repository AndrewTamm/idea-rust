{
	parserClass="vektah.rust.RustParser"

	psiClassPrefix="Rust"
	psiImplClassSuffix="Impl"
	psiPackage="vektah.rust.psi"
	psiImplPackage="vektah.rust.psi.impl"

	elementTypeHolderClass="vektah.rust.psi.RustTokens"
	elementTypeClass="vektah.rust.psi.RustTokenType"
	tokenTypeClass="vektah.rust.psi.RustTokenType"

	tokenTypeClass("keyword")="vektah.rust.psi.RustKeywordTokenType"

	tokens = [
		KW_AS = "as"
		KW_BREAK = "break"
		KW_CRATE = "crate"
		KW_ELSE = "else"
		KW_ENUM = "enum"
		KW_EXTERN = "extern"
		KW_FALSE = "false"
		KW_FN = "fn"
		KW_FOR = "for"
		KW_IF = "if"
		KW_IMPL = "impl"
		KW_IN = "in"
		KW_LET = "let"
		KW_LOOP = "loop"
		KW_MATCH = "match"
		KW_MOD = "mod"
		KW_MUT = "mut"
		KW_PRIV = "priv"
		KW_PROC = "proc"
		KW_PUB = "pub"
		KW_REF = "ref"
		KW_RETURN = "return"
		KW_SELF = "self"
		KW_STATIC = "static"
		KW_STRUCT = "struct"
		KW_SUPER = "super"
		KW_TRUE = "true"
		KW_TRAIT = "trait"
		KW_TYPE = "type"
		KW_UNSAFE = "unsafe"
		KW_USE = "use"
		KW_WHILE = "while"
	]
}

simpleFile ::= ( use
	| token
)*

path ::= IDENTIFIER (
	'::' (
		'<' type (',' type)* '>' |
		path
	)
)?

type ::= IDENTIFIER (
	'<' type (',' type)* '>' |
	'::' type
)+

use ::= ['pub'] 'use' use_part ';'

private use_part ::= IDENTIFIER [
	'=' path |
	'::' path_glob
] {pin=1 recoverWhile="not_semicolon"}

private not_semicolon ::= !(SEMICOLON)

private path_glob ::= IDENTIFIER ( '::' path_glob)? |
	'*' |
	'{' IDENTIFIER ( ',' IDENTIFIER )* '}'

private token ::= (simple_token|literal|comment|symbol|operators|keyword|IDENTIFIER)
private keyword ::= (KW_AS|KW_BREAK|KW_CRATE|KW_ELSE|KW_ENUM|KW_EXTERN|KW_FALSE|KW_FN|KW_FOR|KW_IF|KW_IMPL|KW_IN|KW_LET|KW_LOOP|KW_MATCH|KW_MOD|KW_MUT|KW_PRIV|KW_PROC|KW_PUB|KW_REF|KW_RETURN|KW_SELF|KW_STATIC|KW_STRUCT|KW_SUPER|KW_TRUE|KW_TRAIT|KW_TYPE|KW_UNSAFE|KW_WHILE)
private simple_token ::= (UNOP|BINOP)
private comment ::= (BLOCK_COMMENT|LINE_COMMENT)
private literal ::= (STRING_LIT|RAW_STRING_LIT|CHAR_LIT|NUM_LIT|DEC_LIT|BIN_LIT|OCT_LIT|HEX_LIT)
private symbol ::= (HASH|OPEN_SQUARE_BRACKET|CLOSE_SQUARE_BRACKET|OPEN_PAREN|CLOSE_PAREN|OPEN_BRACE|CLOSE_BRACE|COMMA|COLON|SEMICOLON|DOUBLE_COLON|THIN_ARROW|FAT_ARROW|DOT|AT|SINGLE_QUOTE|DOLLAR)
private operators ::= (arithmetic_operators|bitwise_operators|boolean_operators|comparison_operators|unary_operators|AS|ASSIGN)
private arithmetic_operators ::= (PLUS|MINUS|MULTIPLY|DIVIDE|REMAINDER|)
private bitwise_operators ::= (BITWISE_AND|BITWISE_OR|BITWISE_XOR|LEFT_SHIFT|RIGHT_SHIFT)
private boolean_operators ::= (LOGICAL_OR|LOGICAL_AND)
private unary_operators ::= (NOT|BOX)
private comparison_operators ::= (EQUAL|GREATER_THAN|LESS_THAN|NOT_EQUAL|GREATER_THAN_OR_EQUAL|LESS_THAN_OR_EQUAL)
